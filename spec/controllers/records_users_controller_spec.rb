require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe RecordsUsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # RecordsUser. As you add validations to RecordsUser, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { Fabricate.to_params(:records_user, condition: "very_good", rating: 6, user_id: user.id, record_id: record.id) }

  let(:invalid_attributes) { Fabricate.to_params(:records_user) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecordsUsersController. Be sure to keep this updated too.
  let(:user) {Fabricate(:user)}
  let(:record) {Fabricate(:record)}
  let(:records_user_params_record_dne) do
    { records_user: { condition: "very_good", rating: 7, 
      album_title: "Pajamas all Day", artist: "Beach Bum", year: 1983 } }
  end
  let(:records_user_params_record_exists) do
    { records_user: { condition: "very_good", rating: 7, 
      album_title: record.album_title, artist: record.artist, year: record.year } }
  end

  describe "POST #create" do
    before do
      sign_in user
    end

    context "when valid params" do
      it "creates a new RecordsUser AND new Record if record DNE" do
        sign_in user
        post :create, params: records_user_params_record_dne
      
        expect(assigns(:records_user).record_id).not_to eq(record.id)
        expect(response.status).to eq(302)
      end

      it 'creates new RecordsUser and assigns record_id if record already exists' do
        sign_in user
        post :create, params: records_user_params_record_exists
      
        expect(assigns(:records_user).record_id).to eq(record.id)
        expect(response.status).to eq(302)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        sign_in user

        post :create, params: {records_user: invalid_attributes}
        expect(response).to be_success
      end
    end
  end

  describe "GET #index" do
    before do
      sign_in user
    end

    it "returns a success response" do
      records_user = RecordsUser.create! valid_attributes
      get :index, params: {}
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    before do
      sign_in user
    end

    it "returns a success response" do
      records_user = RecordsUser.create! valid_attributes
      get :show, params: {id: records_user.to_param}
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    context 'when user logged in' do
      it "returns a success response" do
        sign_in user
        get :new
        expect(response.status).to eq(200)
      end
    end
    context 'when not logged in' do
      it 'returns unauthorized' do
        get :new
        expect(response.status).to eq(302)
      end
    end
  end

  describe "GET #edit" do
    before do
      sign_in user
    end

    it "returns a success response" do
      records_user = RecordsUser.create! valid_attributes
      get :edit, params: {id: records_user.to_param}
      expect(response).to be_success
    end
  end

  describe "PUT #update" do
    before do
      sign_in user
    end
    
    context "with valid params" do
      it "updates the requested records_user" do
        params = records_user_params_record_exists[:records_user]
        records_user = RecordsUser.create! params.except(*[:album_title, :artist, :year]).merge(record_id: Record.find_by(album_title: params[:album_title], artist: params[:artist]).id, user_id: user.id)

        put :update, params: {id: records_user.id, records_user: params.merge({condition: "Unopened"}) }
        records_user.reload
        expect(records_user.condition).to eq("unopened")
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        records_user = RecordsUser.create! valid_attributes
        put :update, params: {id: records_user.id, records_user: invalid_attributes.merge({album_title: nil})}
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    before do
      sign_in user
    end

    it "destroys the requested records_user" do
      records_user = RecordsUser.create! valid_attributes
      expect {
        delete :destroy, params: {id: records_user.to_param}
      }.to change(RecordsUser, :count).by(-1)
    end

    it "redirects to the records_users list" do
      records_user = RecordsUser.create! valid_attributes
      delete :destroy, params: {id: records_user.to_param}
      expect(response).to redirect_to(records_users_url)
    end
  end

end
